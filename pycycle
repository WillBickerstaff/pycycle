#! /usr/bin/env python

# Copyright 2010 Will Bickerstaff
# This file is part of PyCycle.
#
# PyCycle is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.read value
#
# PyCycle is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# PyCycle. If not, see http://www.gnu.org/licenses/
import re
import string
import textwrap
import os
from lib.Bike import bike
from lib.Units.speed_units import SpeedUnits

opwidth = 75


class main(object):

    def __init__(self):
        self.b = bike()
        if os.name == "nt":
            self.system_clear_command = "cls"
        else:
            self.system_clear_command = "clear"
        self.run()

    def show_help(self):
        helptext = ("When entering values you can either press return after ",
                    "each entry, or enter all rings as a comma seperated ",
                    "list. Leave the entry empty to finish entering ",
                    "values.\n")

        print textwrap.fill(string.join(helptext), opwidth)
        self.sep()

    def query_ring_changes(self, ring_object):
        qStr = ["There are already rings here, do you want to clear them and",
                "start with an empty set, or add more rings to the",
                "existing set?"]

        print textwrap.fill(string.join(qStr), opwidth)
        print ring_object.to_string(), ''
        clr_rings = raw_input('\nClear rings [y/n]: ')

        if len(clr_rings) == 0:
            clr_rings = 'n'
        if str(clr_rings[0]).lower() == 'y':
            ring_object.clear_rings()

        return ring_object

    def read_rings(self, ring_obj):
        cas = ring_obj
        readVal = -1
        rno = 1
        sentinel = 0
        if cas.num_gears() > 0:
            cas = self.query_ring_changes(cas)
        while readVal != sentinel:
            # Try and make sense of whatever garbage is thrown at us
            v = raw_input("Ring  %d teeth: " % (rno))
            try:
                v = int(v)
                cas.add_rings(v)
            except ValueError:
                try:
                    # regex split on anything thats not a number
                    notdigit = re.compile(r'\D*')
                    varr = notdigit.split(v)
                    for k, s in enumerate(varr):
                        try:
                            s = int(s)
                            cas.add_rings(s)
                            v = sentinel
                        except ValueError:
                            # Give up all hope!!!
                            if len(varr) > k + 1:
                                print ("Value '{0:<s}' is invalid, ignored!".
                                        format(s))
                                pass
                            else:
                                v = sentinel
                except TypeError:
                    print "Whatever that was made no sense"
                    v = sentinel

            readVal = v
            rno += 1

        self.sep()
        return cas

    def sep(self):
        print "\n{0:-<{width}}".format('', width=opwidth)

    def read_wheel(self):
        s = 27
        print "\nEnter the wheel diameter (default is %d\")" % (s)
        try:
            i = int(raw_input("Wheel diameter in inches [%d]: " % (s)))
            if i != 0:
                s = i
        except ValueError:
            pass

        self.sep()
        self.b.wheel_size(s)
        return s

    def format_op(self):
        print "\nSelect output speed"
        out_string = ""
        i = 0
        sp = 'kmh'
        for k, v in enumerate(SpeedUnits.definitions):
            if v.symbol == sp:
                sp = k + 1
                optStr = "*"
            else:
                optStr = " "
            optStr += ("[{0:>2d}] - {1:<s} ({2:<s})".
                        format(k + 1, v.name, v.symbol))

            out_string += "{0:<38}".format(optStr)

            if i < 1:
                i += 1
            else:
                out_string += "\n"
                i = 0

        print out_string

        try:
            inp = int(raw_input(
                "Select [1-{0:d}]: ".format(len(SpeedUnits.definitions))))
            if inp > 0 and inp <= len(SpeedUnits.definitions):
                sp = inp
        except ValueError:
            pass

        self.sep()
        os.system(self.system_clear_command)
        return SpeedUnits.definitions[sp - 1]

    def title(self, titlestr):
        strlen = len(titlestr)
        print " {0:^{width}}".format(titlestr.upper(), width=strlen)
        print "{0:-<{width}}".format('', width=strlen + 2)

    def read_cadence_opts(self):
        do_cadence = raw_input(
            "Would you like to define the cadence output option? y/n: ")
        if len(do_cadence) == 0:
            do_cadence = 'n'
        if str(do_cadence[0]).lower() == 'y':
            self.print_cadence_help()
            return True
        return False

    def print_cadence_help(self):
        prStr = ["Cadence is the speed at which the pedals are turned in rpm,",
                    "a comforatble touring pace is around 55 to 60 while",
                    "trained athletes will often be able to maintain a",
                    "cadence of 120."]
        print ''
        print textwrap.fill(string.join(prStr), opwidth)

    def read_num_cadences(self, default=5):
        infStr = ['You will be shown at least 3 cadences, the minimum and',
                'maximum you have just defined, and one inbetween.  If you',
                'would like more then you can now set the total number of',
                'cadences you would like calculated.  5 fits neatly into a'
                'standard 80 column display and {0:d} is the default.'.format(
                                                default)]
        print ''
        print textwrap.fill(string.join(infStr), opwidth)
        return int(raw_input('\nNumber of cadences ({0:d}): '.format(default)))

    def run(self):
        os.system(self.system_clear_command)
        self.show_help()
        sentinel = 'n'
        readVal = 'y'

        while str(readVal[0]).lower() != sentinel:
            self.title('cassette')
            self.read_rings(self.b.cassette())
            self.title("chainset")
            self.read_rings(self.b.chainset())
            self.title("wheel")
            self.read_wheel()
            usr_min_cadence = 60
            usr_max_cadence = 120
            usr_num_cadences = 5
            if self.read_cadence_opts():
                userVal = raw_input(
                        "\nMinimum cadence ({0:d}): ".format(usr_min_cadence))
                if len(userVal) > 0:
                    usr_min_cadence = int(userVal)
                userVal = raw_input(
                        "\nMaximum cadence ({0:d}): ".format(usr_max_cadence))
                if len(userVal) > 0:
                    usr_max_cadence = int(userVal)
                usr_num_cadences = self.read_num_cadences()

            su = self.format_op()
            self.output_html(self.b.gearing.to_string(
                                           start_cadence=usr_min_cadence,
                                           end_cadence=usr_max_cadence,
                                           num_cadences=usr_num_cadences,
                                           speed_unit=su,
                                           format='html'))
            print self.b.gearing.to_string(start_cadence=usr_min_cadence,
                                           end_cadence=usr_max_cadence,
                                           num_cadences=usr_num_cadences,
                                           speed_unit=su,
                                           )

            readVal = raw_input("Calculate another set [y/n]: ")
            if len(readVal) == 0:
                readVal = 'n'
            os.system(self.system_clear_command)

    def output_html(self, content, file_='gearset.html'):
        html = ['<!DOCTYPE html>']
        html.append('\n\n<head>\n<meta charset="UTF-8">')
        html.append('\n\t<link rel="stylesheet" type="text/css" '
                    'href="output.css" />')
        html.append('\n\t<title>Gearset Result</title>')
        html.append('\n</head>\n<body>')
        html.append(content)
        html.append('\n</body>\n</html>')
        f = open(file_, 'w')
        f.write(''.join(html))
        f.close()

app = main()
